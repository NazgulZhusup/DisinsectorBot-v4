import asyncio
import logging
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from keyboards import *
from config import Config
from app import create_app
from app.model import Client, Order, Disinsector
from database import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger('client_bot')
logger.setLevel(logging.INFO)

file_handler = logging.FileHandler('client_bot.log')
stream_handler = logging.StreamHandler()

formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
stream_handler.setFormatter(formatter)

logger.addHandler(file_handler)
logger.addHandler(stream_handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
client_token = Config.CLIENT_BOT_TOKEN

if not client_token:
    logger.error("CLIENT_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
    raise ValueError("CLIENT_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
else:
    logger.info("CLIENT_BOT_TOKEN —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")

bot = Bot(token=client_token)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# FSM States
class ClientForm(StatesGroup):
    name = State()
    waiting_for_start = State()
    object_type = State()
    insect_quantity = State()
    disinsect_experience = State()
    phone = State()
    address = State()

@dp.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    await message.answer("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
    await state.set_state(ClientForm.name)

@dp.message(ClientForm.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        f"{message.text}, –æ—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ–∑–∏–Ω—Å–µ–∫—Ü–∏–∏.",
        reply_markup=inl_kb_greetings
    )
    await state.set_state(ClientForm.waiting_for_start)

@dp.callback_query(F.data == 'start', StateFilter(ClientForm.waiting_for_start))
async def process_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ–±—ä–µ–∫—Ç–µ. –£ –≤–∞—Å:",
        reply_markup=inl_kb_object_type
    )
    await state.set_state(ClientForm.object_type)

@dp.callback_query(F.data.startswith('object_'), StateFilter(ClientForm.object_type))
async def process_object(callback: types.CallbackQuery, state: FSMContext):
    object_selected = callback.data.split('_', 1)[1]
    await state.update_data(object_type=object_selected)
    await callback.answer()
    await callback.message.answer(
        "–°–∫–æ–ª—å–∫–æ –Ω–∞—Å–µ–∫–æ–º—ã—Ö –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏?",
        reply_markup=inl_kb_insect_quantity
    )
    await state.set_state(ClientForm.insect_quantity)

@dp.callback_query(F.data.startswith('quantity_'), StateFilter(ClientForm.insect_quantity))
async def process_insect_quantity(callback: types.CallbackQuery, state: FSMContext):
    quantity_selected = callback.data.split('_', 1)[1]
    await state.update_data(insect_quantity=quantity_selected)
    await callback.answer()
    await callback.message.answer(
        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –¥–µ–∑–∏–Ω—Å–µ–∫—Ü–∏–∏?",
        reply_markup=inl_kb_experience
    )
    await state.set_state(ClientForm.disinsect_experience)

@dp.callback_query(F.data.startswith('experience_'), StateFilter(ClientForm.disinsect_experience))
async def process_disinsect_experience(callback: types.CallbackQuery, state: FSMContext):
    experience_selected = callback.data.split('_', 1)[1]
    await state.update_data(disinsect_experience=experience_selected)
    await callback.answer()
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=kb_contact
    )
    await state.set_state(ClientForm.phone)

@dp.message(ClientForm.phone, F.content_type == types.ContentType.CONTACT)
async def process_phone_contact(message: types.Message, state: FSMContext):
    phone = re.sub(r'\D', '', message.contact.phone_number)
    await state.update_data(phone=phone)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–∞—à–Ω–∏–π –∞–¥—Ä–µ—Å:")
    await state.set_state(ClientForm.address)

@dp.message(ClientForm.phone, F.content_type == types.ContentType.TEXT)
async def process_phone_text(message: types.Message, state: FSMContext):
    phone = re.sub(r'\D', '', message.text)
    if not re.fullmatch(r'\d{10,15}', phone):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    await state.update_data(phone=phone)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–∞—à–Ω–∏–π –∞–¥—Ä–µ—Å:")
    await state.set_state(ClientForm.address)

@dp.message(ClientForm.address)
async def process_address(message: types.Message, state: FSMContext):
    try:
        address = message.text.strip()
        if len(address) < 5:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–∞—à–Ω–∏–π –∞–¥—Ä–µ—Å.")
            return
        await state.update_data(address=address)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        client = Client.query.filter_by(phone=user_data['phone']).first()
        if not client:
            client = Client(name=user_data['name'], phone=user_data['phone'], address=user_data['address'])
            db.session.add(client)
            db.session.commit()

        last_assigned = db.session.query(Order.disinsector_id).order_by(Order.created_at.desc()).first()

        if last_assigned:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ
            next_disinsector = Disinsector.query.filter(Disinsector.id > last_assigned[0]).first()
            if not next_disinsector:  # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞
                next_disinsector = Disinsector.query.first()
        else:
            # –ï—Å–ª–∏ –∑–∞—è–≤–æ–∫ –µ—â—ë –Ω–µ –±—ã–ª–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä–∞
            next_disinsector = Disinsector.query.first()

        if not next_disinsector:
            raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
        disinsect_experience = user_data['disinsect_experience'] == 'yes'
        new_order = Order(
            client_id=client.id,
            disinsector_id=next_disinsector.id,  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä—É
            object_type=user_data['object_type'],
            insect_quantity=user_data['insect_quantity'],
            disinsect_experience=disinsect_experience,
            order_status='–ù–æ–≤–∞—è'
        )
        db.session.add(new_order)
        db.session.commit()

        await state.clear()

        await message.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        await message.answer(
            f"üîî –ó–∞—è–≤–∫–∞ ‚Ññ{new_order.id}.\n"
            f"–ò–º—è: {client.name}\n"
            f"–ê–¥—Ä–µ—Å: {client.address}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {client.phone}\n"
            f"–û–±—ä–µ–∫—Ç: {new_order.object_type}\n"
        )


    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def main():
    app = create_app()
    with app.app_context():
        await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
